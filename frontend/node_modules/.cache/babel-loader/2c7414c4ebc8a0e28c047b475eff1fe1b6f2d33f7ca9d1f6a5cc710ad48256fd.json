{"ast":null,"code":"// src/services/authService.ts\n\n// Función para iniciar sesión\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error logging in:', error);\n    return false;\n  }\n};\nexport const register = async (email, password, extraData = {}) => {\n  try {\n    const response = await fetch('/api/auth/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password,\n        ...extraData\n      })\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error registering:', error);\n    return false;\n  }\n};\n\n// Función para recuperar la contraseña\nexport const recoverPassword = async email => {\n  try {\n    const response = await fetch('/api/auth/recover', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error recovering password:', error);\n    return false;\n  }\n};\n\n// Función para cerrar sesión\nexport const logout = async () => {\n  try {\n    await fetch('/api/auth/logout', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  } catch (error) {\n    console.error('Error logging out:', error);\n  }\n};\n\n// Función para obtener el email del usuario autenticado (requiere autenticación)\nexport const getUserEmail = async () => {\n  try {\n    const response = await fetch('/api/auth/user', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      return data.email;\n    }\n    throw new Error('Failed to fetch user email');\n  } catch (error) {\n    console.error('Error fetching user email:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","error","console","register","extraData","recoverPassword","logout","getUserEmail","data","json","Error"],"sources":["C:/felder_silveman/frontend/src/services/authService.ts"],"sourcesContent":["// src/services/authService.ts\r\n\r\ninterface UserCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterData {\r\n  email: string;\r\n  password: string;\r\n  username?: string;\r\n}\r\n// Función para iniciar sesión\r\nexport const login = async (email: string, password: string): Promise<boolean> => {\r\n  try {\r\n    const response = await fetch('/api/auth/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    return response.ok;\r\n  } catch (error) {\r\n    console.error('Error logging in:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const register = async (email: string, password: string, extraData: Partial<RegisterData> = {}): Promise<boolean> => {\r\n  try {\r\n    const response = await fetch('/api/auth/register', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password, ...extraData }),\r\n    });\r\n    return response.ok;\r\n  } catch (error) {\r\n    console.error('Error registering:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Función para recuperar la contraseña\r\nexport const recoverPassword = async (email: string): Promise<boolean> => {\r\n  try {\r\n    const response = await fetch('/api/auth/recover', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email }),\r\n    });\r\n    return response.ok;\r\n  } catch (error) {\r\n    console.error('Error recovering password:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Función para cerrar sesión\r\nexport const logout = async (): Promise<void> => {\r\n  try {\r\n    await fetch('/api/auth/logout', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error logging out:', error);\r\n  }\r\n};\r\n\r\n// Función para obtener el email del usuario autenticado (requiere autenticación)\r\nexport const getUserEmail = async (): Promise<string> => {\r\n  try {\r\n    const response = await fetch('/api/auth/user', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      return data.email;\r\n    }\r\n    throw new Error('Failed to fetch user email');\r\n  } catch (error) {\r\n    console.error('Error fetching user email:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n"],"mappings":"AAAA;;AAYA;AACA,OAAO,MAAMA,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAuB;EAChF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;MAC9CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACO,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAME,QAAQ,GAAG,MAAAA,CAAOZ,KAAa,EAAEC,QAAgB,EAAEY,SAAgC,GAAG,CAAC,CAAC,KAAuB;EAC1H,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;MACjDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC,QAAQ;QAAE,GAAGY;MAAU,CAAC;IACxD,CAAC,CAAC;IACF,OAAOX,QAAQ,CAACO,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,eAAe,GAAG,MAAOd,KAAa,IAAuB;EACxE,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,EAAE;MAChDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER;MAAM,CAAC;IAChC,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACO,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,MAAM,GAAG,MAAAA,CAAA,KAA2B;EAC/C,IAAI;IACF,MAAMZ,KAAK,CAAC,kBAAkB,EAAE;MAC9BC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC5C;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,YAAY,GAAG,MAAAA,CAAA,KAA6B;EACvD,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgB,EAAE;MAC7CC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,IAAIH,QAAQ,CAACO,EAAE,EAAE;MACf,MAAMQ,IAAI,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACjB,KAAK;IACnB;IACA,MAAM,IAAImB,KAAK,CAAC,4BAA4B,CAAC;EAC/C,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}