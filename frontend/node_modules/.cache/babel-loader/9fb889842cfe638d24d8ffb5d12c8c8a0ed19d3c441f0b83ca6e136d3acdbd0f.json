{"ast":null,"code":"// src/services/authService.js\n\n/**\r\n * Realiza el inicio de sesión del usuario.\r\n * \r\n * @param {string} email - Correo electrónico del usuario.\r\n * @param {string} password - Contraseña del usuario.\r\n * @returns {Promise<boolean>} - Retorna true si el inicio de sesión es exitoso, de lo contrario false.\r\n */\nexport const login = async (email, password) => {\n  try {\n    const response = await fetch('/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error logging in:', error);\n    return false;\n  }\n};\n\n/**\r\n * Registra un nuevo usuario.\r\n * \r\n * @param {string} email - Correo electrónico del usuario.\r\n * @param {string} password - Contraseña del usuario.\r\n * @param {object} extraData - Datos adicionales para el registro.\r\n * @returns {Promise<boolean>} - Retorna true si el registro es exitoso, de lo contrario false.\r\n */\nexport const register = async (email, password, extraData = {}) => {\n  try {\n    const response = await fetch('/api/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password,\n        ...extraData\n      })\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error registering:', error);\n    return false;\n  }\n};\n\n/**\r\n * Envía un correo electrónico para la recuperación de contraseña.\r\n * \r\n * @param {string} email - Correo electrónico del usuario.\r\n * @returns {Promise<boolean>} - Retorna true si el correo de recuperación es enviado, de lo contrario false.\r\n */\nexport const recoverPassword = async email => {\n  try {\n    const response = await fetch('/api/recover', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error recovering password:', error);\n    return false;\n  }\n};\n\n/**\r\n * Cierra la sesión del usuario.\r\n * \r\n * @returns {Promise<void>} - Retorna una promesa que se resuelve cuando la sesión se ha cerrado.\r\n */\nexport const logout = async () => {\n  try {\n    await fetch('/api/logout', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  } catch (error) {\n    console.error('Error logging out:', error);\n  }\n};","map":{"version":3,"names":["login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","error","console","register","extraData","recoverPassword","logout"],"sources":["C:/02072024/frontend/src/services/authService.ts"],"sourcesContent":["// src/services/authService.js\r\n\r\n/**\r\n * Realiza el inicio de sesión del usuario.\r\n * \r\n * @param {string} email - Correo electrónico del usuario.\r\n * @param {string} password - Contraseña del usuario.\r\n * @returns {Promise<boolean>} - Retorna true si el inicio de sesión es exitoso, de lo contrario false.\r\n */\r\nexport const login = async (email: string, password: string): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch('/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('Error logging in:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Registra un nuevo usuario.\r\n   * \r\n   * @param {string} email - Correo electrónico del usuario.\r\n   * @param {string} password - Contraseña del usuario.\r\n   * @param {object} extraData - Datos adicionales para el registro.\r\n   * @returns {Promise<boolean>} - Retorna true si el registro es exitoso, de lo contrario false.\r\n   */\r\n  export const register = async (email: string, password: string, extraData: object = {}): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch('/api/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password, ...extraData }),\r\n      });\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('Error registering:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Envía un correo electrónico para la recuperación de contraseña.\r\n   * \r\n   * @param {string} email - Correo electrónico del usuario.\r\n   * @returns {Promise<boolean>} - Retorna true si el correo de recuperación es enviado, de lo contrario false.\r\n   */\r\n  export const recoverPassword = async (email: string): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch('/api/recover', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email }),\r\n      });\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('Error recovering password:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Cierra la sesión del usuario.\r\n   * \r\n   * @returns {Promise<void>} - Retorna una promesa que se resuelve cuando la sesión se ha cerrado.\r\n   */\r\n  export const logout = async (): Promise<void> => {\r\n    try {\r\n      await fetch('/api/logout', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error('Error logging out:', error);\r\n    }\r\n  };\r\n  \r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAuB;EAC9E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACO,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,OAAO,MAAME,QAAQ,GAAG,MAAAA,CAAOZ,KAAa,EAAEC,QAAgB,EAAEY,SAAiB,GAAG,CAAC,CAAC,KAAuB;EAC3G,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAE;MAC5CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC,QAAQ;QAAE,GAAGY;MAAU,CAAC;IACxD,CAAC,CAAC;IACF,OAAOX,QAAQ,CAACO,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACE,OAAO,MAAMI,eAAe,GAAG,MAAOd,KAAa,IAAuB;EACxE,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAc,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER;MAAM,CAAC;IAChC,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACO,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMK,MAAM,GAAG,MAAAA,CAAA,KAA2B;EAC/C,IAAI;IACF,MAAMZ,KAAK,CAAC,aAAa,EAAE;MACzBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC5C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}