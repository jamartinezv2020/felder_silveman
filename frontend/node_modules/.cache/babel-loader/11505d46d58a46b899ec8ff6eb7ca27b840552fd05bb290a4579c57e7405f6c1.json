{"ast":null,"code":"import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport User from '../models/User';\nimport Student from '../models/Student';\nimport { classifyLearningStyle } from '../utils/learningStyleClassifier';\n\n// Controlador para registrar un nuevo usuario\nexport const registerUser = async (req, res) => {\n  const {\n    username,\n    email,\n    password\n  } = req.body;\n  try {\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) {\n      return res.status(400).json({\n        message: 'El usuario ya existe'\n      });\n    }\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new User({\n      username,\n      email,\n      password: hashedPassword\n    });\n    await newUser.save();\n    res.status(201).json({\n      message: 'Usuario registrado exitosamente'\n    });\n  } catch (error) {\n    console.error('Error registrando usuario:', error);\n    res.status(500).json({\n      message: 'Error del servidor'\n    });\n  }\n};\n\n// Controlador para iniciar sesión de usuario\nexport const loginUser = async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(404).json({\n        message: 'Usuario no encontrado'\n      });\n    }\n    const passwordMatch = await bcrypt.compare(password, user.password);\n    if (!passwordMatch) {\n      return res.status(401).json({\n        message: 'Credenciales inválidas'\n      });\n    }\n    const token = jwt.sign({\n      userId: user._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1h'\n    });\n    res.status(200).json({\n      message: 'Inicio de sesión exitoso',\n      token\n    });\n  } catch (error) {\n    console.error('Error iniciando sesión de usuario:', error);\n    res.status(500).json({\n      message: 'Error del servidor'\n    });\n  }\n};\n\n// Controlador para actualizar el estilo de aprendizaje de un estudiante\nexport const updateStudentLearningStyle = async (req, res) => {\n  try {\n    const {\n      responses,\n      studentId\n    } = req.body;\n    if (!studentId) {\n      return res.status(400).json({\n        message: 'Falta el ID del estudiante'\n      });\n    }\n    const learningStyle = classifyLearningStyle(responses);\n    const student = await Student.findByIdAndUpdate(studentId, {\n      learningStyle\n    }, {\n      new: true,\n      runValidators: true\n    });\n    if (!student) {\n      res.status(404).json({\n        message: 'Estudiante no encontrado'\n      });\n    } else {\n      res.status(200).json(student);\n    }\n  } catch (error) {\n    console.error('Error actualizando estilo de aprendizaje:', error);\n    res.status(500).json({\n      message: 'Error del servidor',\n      error: error.message\n    });\n  }\n};\n\n// Controlador para obtener todos los usuarios\nexport const getAllUsers = async (req, res) => {\n  try {\n    const users = await User.find().select('-password');\n    res.status(200).json(users);\n  } catch (error) {\n    console.error('Error obteniendo usuarios:', error);\n    res.status(500).json({\n      message: 'Error del servidor'\n    });\n  }\n};\n\n// Controlador para obtener un usuario por ID\nexport const getUserById = async (req, res) => {\n  const userId = req.params.id;\n  try {\n    const user = await User.findById(userId).select('-password');\n    if (!user) {\n      return res.status(404).json({\n        message: 'Usuario no encontrado'\n      });\n    }\n    res.status(200).json(user);\n  } catch (error) {\n    console.error('Error obteniendo usuario por ID:', error);\n    res.status(500).json({\n      message: 'Error del servidor'\n    });\n  }\n};\n\n// Controlador para actualizar los datos de un usuario\nexport const updateUser = async (req, res) => {\n  const userId = req.params.id;\n  const {\n    username,\n    email\n  } = req.body;\n  try {\n    const updatedUser = await User.findByIdAndUpdate(userId, {\n      username,\n      email\n    }, {\n      new: true\n    }).select('-password');\n    if (!updatedUser) {\n      return res.status(404).json({\n        message: 'Usuario no encontrado'\n      });\n    }\n    res.status(200).json(updatedUser);\n  } catch (error) {\n    console.error('Error actualizando usuario:', error);\n    res.status(500).json({\n      message: 'Error del servidor'\n    });\n  }\n};\n\n// Controlador para eliminar un usuario\nexport const deleteUser = async (req, res) => {\n  const userId = req.params.id;\n  try {\n    const deletedUser = await User.findByIdAndDelete(userId);\n    if (!deletedUser) {\n      return res.status(404).json({\n        message: 'Usuario no encontrado'\n      });\n    }\n    res.status(200).json({\n      message: 'Usuario eliminado exitosamente'\n    });\n  } catch (error) {\n    console.error('Error eliminando usuario:', error);\n    res.status(500).json({\n      message: 'Error del servidor'\n    });\n  }\n};\n\n// Controlador para obtener el perfil del usuario autenticado\nexport const getUserProfile = async (req, res) => {\n  try {\n    const userId = req.user.userId;\n    const user = await User.findById(userId).select('-password');\n    if (!user) {\n      return res.status(404).json({\n        message: 'Usuario no encontrado'\n      });\n    }\n    res.json(user);\n  } catch (error) {\n    console.error('Error obteniendo perfil de usuario:', error);\n    res.status(500).json({\n      message: 'Error del servidor'\n    });\n  }\n};","map":{"version":3,"names":["bcrypt","jwt","User","Student","classifyLearningStyle","registerUser","req","res","username","email","password","body","existingUser","findOne","status","json","message","hashedPassword","hash","newUser","save","error","console","loginUser","user","passwordMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","updateStudentLearningStyle","responses","studentId","learningStyle","student","findByIdAndUpdate","new","runValidators","getAllUsers","users","find","select","getUserById","params","id","findById","updateUser","updatedUser","deleteUser","deletedUser","findByIdAndDelete","getUserProfile"],"sources":["C:/felder_silveman/frontend/src/pages/UserManagementPage/UserManagementPage.tsx"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport User from '../models/User';\r\nimport Student from '../models/Student';\r\nimport { classifyLearningStyle } from '../utils/learningStyleClassifier';\r\n\r\n// Controlador para registrar un nuevo usuario\r\nexport const registerUser = async (req: Request, res: Response) => {\r\n  const { username, email, password } = req.body;\r\n\r\n  try {\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: 'El usuario ya existe' });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    const newUser = new User({\r\n      username,\r\n      email,\r\n      password: hashedPassword,\r\n    });\r\n\r\n    await newUser.save();\r\n\r\n    res.status(201).json({ message: 'Usuario registrado exitosamente' });\r\n  } catch (error) {\r\n    console.error('Error registrando usuario:', error);\r\n    res.status(500).json({ message: 'Error del servidor' });\r\n  }\r\n};\r\n\r\n// Controlador para iniciar sesión de usuario\r\nexport const loginUser = async (req: Request, res: Response) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'Usuario no encontrado' });\r\n    }\r\n\r\n    const passwordMatch = await bcrypt.compare(password, user.password);\r\n    if (!passwordMatch) {\r\n      return res.status(401).json({ message: 'Credenciales inválidas' });\r\n    }\r\n\r\n    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET as string, { expiresIn: '1h' });\r\n\r\n    res.status(200).json({ message: 'Inicio de sesión exitoso', token });\r\n  } catch (error) {\r\n    console.error('Error iniciando sesión de usuario:', error);\r\n    res.status(500).json({ message: 'Error del servidor' });\r\n  }\r\n};\r\n\r\n// Controlador para actualizar el estilo de aprendizaje de un estudiante\r\nexport const updateStudentLearningStyle = async (req: Request, res: Response) => {\r\n  try {\r\n    const { responses, studentId } = req.body;\r\n    if (!studentId) {\r\n      return res.status(400).json({ message: 'Falta el ID del estudiante' });\r\n    }\r\n\r\n    const learningStyle = classifyLearningStyle(responses);\r\n\r\n    const student = await Student.findByIdAndUpdate(\r\n      studentId,\r\n      { learningStyle },\r\n      { new: true, runValidators: true }\r\n    );\r\n\r\n    if (!student) {\r\n      res.status(404).json({ message: 'Estudiante no encontrado' });\r\n    } else {\r\n      res.status(200).json(student);\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Error actualizando estilo de aprendizaje:', error);\r\n    res.status(500).json({ message: 'Error del servidor', error: error.message });\r\n  }\r\n};\r\n\r\n// Controlador para obtener todos los usuarios\r\nexport const getAllUsers = async (req: Request, res: Response) => {\r\n  try {\r\n    const users = await User.find().select('-password');\r\n    res.status(200).json(users);\r\n  } catch (error) {\r\n    console.error('Error obteniendo usuarios:', error);\r\n    res.status(500).json({ message: 'Error del servidor' });\r\n  }\r\n};\r\n\r\n// Controlador para obtener un usuario por ID\r\nexport const getUserById = async (req: Request, res: Response) => {\r\n  const userId = req.params.id;\r\n\r\n  try {\r\n    const user = await User.findById(userId).select('-password');\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'Usuario no encontrado' });\r\n    }\r\n    res.status(200).json(user);\r\n  } catch (error) {\r\n    console.error('Error obteniendo usuario por ID:', error);\r\n    res.status(500).json({ message: 'Error del servidor' });\r\n  }\r\n};\r\n\r\n// Controlador para actualizar los datos de un usuario\r\nexport const updateUser = async (req: Request, res: Response) => {\r\n  const userId = req.params.id;\r\n  const { username, email } = req.body;\r\n\r\n  try {\r\n    const updatedUser = await User.findByIdAndUpdate(\r\n      userId, \r\n      { username, email }, \r\n      { new: true }\r\n    ).select('-password');\r\n    if (!updatedUser) {\r\n      return res.status(404).json({ message: 'Usuario no encontrado' });\r\n    }\r\n    res.status(200).json(updatedUser);\r\n  } catch (error) {\r\n    console.error('Error actualizando usuario:', error);\r\n    res.status(500).json({ message: 'Error del servidor' });\r\n  }\r\n};\r\n\r\n// Controlador para eliminar un usuario\r\nexport const deleteUser = async (req: Request, res: Response) => {\r\n  const userId = req.params.id;\r\n\r\n  try {\r\n    const deletedUser = await User.findByIdAndDelete(userId);\r\n    if (!deletedUser) {\r\n      return res.status(404).json({ message: 'Usuario no encontrado' });\r\n    }\r\n    res.status(200).json({ message: 'Usuario eliminado exitosamente' });\r\n  } catch (error) {\r\n    console.error('Error eliminando usuario:', error);\r\n    res.status(500).json({ message: 'Error del servidor' });\r\n  }\r\n};\r\n\r\n// Controlador para obtener el perfil del usuario autenticado\r\nexport const getUserProfile = async (req: Request, res: Response) => {\r\n  try {\r\n    const userId = (req as any).user.userId;\r\n\r\n    const user = await User.findById(userId).select('-password');\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'Usuario no encontrado' });\r\n    }\r\n\r\n    res.json(user);\r\n  } catch (error) {\r\n    console.error('Error obteniendo perfil de usuario:', error);\r\n    res.status(500).json({ message: 'Error del servidor' });\r\n  }\r\n};\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}