{"ast":null,"code":"// learningStyleClassifier.ts\n\nexport const classifyLearningStyleFelderSilverman = responses => {\n  if (responses.length !== 44) {\n    throw new Error(\"Invalid number of responses. Expected 44.\");\n  }\n  let active = 0,\n    reflective = 0;\n  let sensing = 0,\n    intuitive = 0;\n  let visual = 0,\n    verbal = 0;\n  let sequential = 0,\n    global = 0;\n  for (let i = 0; i < 44; i++) {\n    const response = responses[i];\n    switch (i % 4) {\n      case 0:\n        // Active/Reflective\n        if (response === 1) active++;else reflective++;\n        break;\n      case 1:\n        // Sensing/Intuitive\n        if (response === 1) sensing++;else intuitive++;\n        break;\n      case 2:\n        // Visual/Verbal\n        if (response === 1) visual++;else verbal++;\n        break;\n      case 3:\n        // Sequential/Global\n        if (response === 1) sequential++;else global++;\n        break;\n      default:\n        break;\n    }\n  }\n  const learningStyle = [active >= reflective ? 'Active' : 'Reflective', sensing >= intuitive ? 'Sensing' : 'Intuitive', visual >= verbal ? 'Visual' : 'Verbal', sequential >= global ? 'Sequential' : 'Global'];\n  return learningStyle;\n};","map":{"version":3,"names":["classifyLearningStyleFelderSilverman","responses","length","Error","active","reflective","sensing","intuitive","visual","verbal","sequential","global","i","response","learningStyle"],"sources":["C:/felder_silveman/frontend/src/utils/learningStyleClassifierFelderSilveraman.ts"],"sourcesContent":["// learningStyleClassifier.ts\r\n\r\nexport const classifyLearningStyleFelderSilverman = (responses: number[]): string[] => {\r\n    if (responses.length !== 44) {\r\n      throw new Error(\"Invalid number of responses. Expected 44.\");\r\n    }\r\n  \r\n    let active = 0, reflective = 0;\r\n    let sensing = 0, intuitive = 0;\r\n    let visual = 0, verbal = 0;\r\n    let sequential = 0, global = 0;\r\n  \r\n    for (let i = 0; i < 44; i++) {\r\n      const response = responses[i];\r\n  \r\n      switch (i % 4) {\r\n        case 0: // Active/Reflective\r\n          if (response === 1) active++;\r\n          else reflective++;\r\n          break;\r\n        case 1: // Sensing/Intuitive\r\n          if (response === 1) sensing++;\r\n          else intuitive++;\r\n          break;\r\n        case 2: // Visual/Verbal\r\n          if (response === 1) visual++;\r\n          else verbal++;\r\n          break;\r\n        case 3: // Sequential/Global\r\n          if (response === 1) sequential++;\r\n          else global++;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  \r\n    const learningStyle: string[] = [\r\n      active >= reflective ? 'Active' : 'Reflective',\r\n      sensing >= intuitive ? 'Sensing' : 'Intuitive',\r\n      visual >= verbal ? 'Visual' : 'Verbal',\r\n      sequential >= global ? 'Sequential' : 'Global',\r\n    ];\r\n  \r\n    return learningStyle;\r\n  };\r\n  "],"mappings":"AAAA;;AAEA,OAAO,MAAMA,oCAAoC,GAAIC,SAAmB,IAAe;EACnF,IAAIA,SAAS,CAACC,MAAM,KAAK,EAAE,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EAEA,IAAIC,MAAM,GAAG,CAAC;IAAEC,UAAU,GAAG,CAAC;EAC9B,IAAIC,OAAO,GAAG,CAAC;IAAEC,SAAS,GAAG,CAAC;EAC9B,IAAIC,MAAM,GAAG,CAAC;IAAEC,MAAM,GAAG,CAAC;EAC1B,IAAIC,UAAU,GAAG,CAAC;IAAEC,MAAM,GAAG,CAAC;EAE9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3B,MAAMC,QAAQ,GAAGZ,SAAS,CAACW,CAAC,CAAC;IAE7B,QAAQA,CAAC,GAAG,CAAC;MACX,KAAK,CAAC;QAAE;QACN,IAAIC,QAAQ,KAAK,CAAC,EAAET,MAAM,EAAE,CAAC,KACxBC,UAAU,EAAE;QACjB;MACF,KAAK,CAAC;QAAE;QACN,IAAIQ,QAAQ,KAAK,CAAC,EAAEP,OAAO,EAAE,CAAC,KACzBC,SAAS,EAAE;QAChB;MACF,KAAK,CAAC;QAAE;QACN,IAAIM,QAAQ,KAAK,CAAC,EAAEL,MAAM,EAAE,CAAC,KACxBC,MAAM,EAAE;QACb;MACF,KAAK,CAAC;QAAE;QACN,IAAII,QAAQ,KAAK,CAAC,EAAEH,UAAU,EAAE,CAAC,KAC5BC,MAAM,EAAE;QACb;MACF;QACE;IACJ;EACF;EAEA,MAAMG,aAAuB,GAAG,CAC9BV,MAAM,IAAIC,UAAU,GAAG,QAAQ,GAAG,YAAY,EAC9CC,OAAO,IAAIC,SAAS,GAAG,SAAS,GAAG,WAAW,EAC9CC,MAAM,IAAIC,MAAM,GAAG,QAAQ,GAAG,QAAQ,EACtCC,UAAU,IAAIC,MAAM,GAAG,YAAY,GAAG,QAAQ,CAC/C;EAED,OAAOG,aAAa;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}